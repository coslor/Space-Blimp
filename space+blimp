;
; File generated by cc65 v 2.19 - Git 43881af
;
	.fopt		compiler,"cc65 v 2.19 - Git 43881af"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.forceimport	initmainargs
	.import		_printf
	.import		_strlen
	.import		_exit
	.import		__afailed
	.export		_set_sprite_x
	.import		_loadbin
	.export		_clr_screen
	.export		_init_mob
	.export		_move_mobs
	.export		_sprite_switching_bouncy_border_collision_handler
	.export		_bouncy_border_collision_handler
	.export		_velocity_movement_handler
	.export		_load_sprites
	.export		_init_mobs
	.export		_set_bit
	.export		_move_mob
	.export		_draw_mobs
	.export		_dump_mob
	.export		_draw_mob
	.export		_next_sprite_ptr
	.export		_prev_sprite_ptr
	.export		_mobs
	.export		_sprite_defs
	.export		_sprite_data_vicptr
	.export		_screen
	.export		_pow2
	.export		_blimp_ptrs
	.export		_blimp_ptr_len
	.export		_main

.segment	"DATA"

_sprite_defs:
	.word	$3000
_sprite_data_vicptr:
	.word	$07F8
_screen:
	.word	$0400
_pow2:
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$10
	.byte	$20
	.byte	$40
	.byte	$80
_blimp_ptrs:
	.byte	$C1
	.byte	$C3
_blimp_ptr_len:
	.byte	$02

.segment	"RODATA"

S0004:
	.byte	$C6,$41,$49,$4C,$45,$44,$20,$54,$4F,$20,$4C,$4F,$41,$44,$20,$27
	.byte	$25,$53,$27,$20,$57,$49,$54,$48,$20,$45,$52,$52,$4F,$52,$20,$43
	.byte	$4F,$44,$45,$20,$25,$44,$2E,$0D,$20,$D4,$52,$59,$49,$4E,$47,$20
	.byte	$41,$4C,$54,$45,$52,$4E,$41,$54,$45,$20,$46,$49,$4C,$45,$4E,$41
	.byte	$4D,$45,$20,$27,$25,$53,$27,$2E,$2E,$2E,$0D,$00
S0019:
	.byte	$25,$55,$3A,$53,$50,$52,$49,$54,$45,$A4,$50,$54,$52,$A4,$4E,$55
	.byte	$4D,$3D,$25,$55,$2C,$53,$50,$52,$49,$54,$45,$A4,$50,$54,$52,$3D
	.byte	$25,$55,$0D,$00
S0018	:=	S0019+0
S0005:
	.byte	$D3,$50,$52,$49,$54,$45,$20,$4C,$4F,$41,$44,$20,$46,$41,$49,$4C
	.byte	$45,$44,$20,$57,$49,$54,$48,$20,$43,$4F,$44,$45,$20,$25,$44,$0D
	.byte	$00
S0007:
	.byte	$D3,$50,$41,$43,$45,$20,$C2,$4C,$49,$4D,$50,$2C,$20,$4D,$4F,$54
	.byte	$48,$41,$20,$4D,$4F,$54,$48,$41,$21,$21,$21,$0D,$00
S0010:
	.byte	$45,$4E,$41,$42,$4C,$45,$44,$3A,$25,$44,$20,$58,$3A,$25,$44,$20
	.byte	$59,$3A,$25,$44,$20,$0D,$00
S0017:
	.byte	$4D,$2D,$3E,$53,$50,$52,$49,$54,$45,$A4,$50,$54,$52,$A4,$4E,$55
	.byte	$4D,$3D,$25,$44,$0D,$00
S000C:
	.byte	$CD,$CF,$C2,$20,$25,$50,$20,$C1,$43,$54,$49,$56,$45,$3A,$20,$25
	.byte	$44,$20,$0D,$00
S000D:
	.byte	$09,$D3,$50,$52,$49,$54,$45,$20,$25,$44,$20,$D0,$54,$52,$3A,$25
	.byte	$44,$0D,$00
S0006:
	.byte	$53,$50,$52,$49,$54,$45,$53,$20,$4C,$4F,$41,$44,$45,$44,$21,$0D
	.byte	$00
S0014:
	.byte	$53,$50,$41,$43,$45,$2D,$42,$4C,$49,$4D,$50,$2E,$43,$00
S000B	:=	S0014+0
S0016	:=	S0014+0
S0015	:=	S0014+0
S0013	:=	S0014+0
S0011	:=	S0014+0
S000E:
	.byte	$09,$CC,$4F,$43,$3A,$20,$25,$44,$2C,$25,$44,$0D,$00
S000F:
	.byte	$0D,$D3,$50,$52,$49,$54,$45,$20,$25,$44,$3A,$0D,$00
S0001:
	.byte	$53,$50,$52,$49,$54,$45,$53,$2E,$50,$52,$47,$00
S0008:
	.byte	$42,$4C,$49,$4D,$50,$A4,$50,$54,$52,$53,$3A,$00
S0003:
	.byte	$44,$45,$56,$49,$43,$45,$3D,$25,$44,$0D,$00
S0002:
	.byte	$53,$50,$52,$49,$54,$45,$53,$00
S0009:
	.byte	$25,$44,$3D,$25,$44,$20,$00
S000A	:=	S0004+74

.segment	"BSS"

_mobs:
	.res	40,$00

; ---------------------------------------------------------------
; void __near__ set_sprite_x (unsigned char sprite_num, int x_pos)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_sprite_x: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp1
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	cmp     #$09
	jsr     boolult
	jeq     L0002
	jmp     L0003
L0002:	lda     #<(S0011)
	ldx     #>(S0011)
	jsr     pushax
	ldx     #$00
	lda     #$FF
	jsr     __afailed
L0003:	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     aslax1
	jsr     pushax
	ldx     #$D0
	lda     #$00
	jsr     tosaddax
	jsr     pushax
	ldy     #$04
	jsr     ldaxysp
	ldx     #$00
	ldx     #$00
	ldy     #$00
	jsr     staspidx
	ldy     #$02
	jsr     ldaxysp
	jsr     pushax
	ldx     #$01
	lda     #$00
	jsr     tosdivax
	ldx     #$00
	ldy     #$00
	sta     (sp),y
	ldx     #$D0
	lda     #$10
	jsr     pushax
	ldy     #$05
	lda     (sp),y
	jsr     pusha
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	cmp     #$00
	jsr     boolne
	ldx     #$00
	jsr     _set_bit
	jsr     incsp4
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ clr_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clr_screen: near

.segment	"CODE"

	jsr     $E544
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ init_mob (unsigned char num, unsigned char active, unsigned char sprite_num, unsigned char mcolor, unsigned char *sprite_ptrs, unsigned char sprite_ptrs_len, unsigned int x, unsigned char expand_x, unsigned char y, unsigned char expand_y, signed char xvel, signed char yvel, unsigned char color, void (*coll_handler)(struct MOB *, int), void (*move_handler)(struct MOB *))
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_mob: near

.segment	"CODE"

	jsr     pushax
	ldy     #$12
	ldx     #$00
	lda     (sp),y
	jsr     pushax
	ldx     #$00
	lda     #$14
	jsr     tosmulax
	clc
	adc     #<(_mobs)
	tay
	txa
	adc     #>(_mobs)
	tax
	tya
	jsr     pushax
	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	ldy     #$15
	ldx     #$00
	lda     (sp),y
	ldy     #$00
	jsr     staspidx
	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	ldy     #$14
	ldx     #$00
	lda     (sp),y
	ldy     #$01
	jsr     staspidx
	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	ldy     #$12
	jsr     ldaxysp
	ldy     #$12
	jsr     staxspidx
	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	ldy     #$10
	ldx     #$00
	lda     (sp),y
	ldy     #$10
	jsr     staspidx
	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	ldx     #$00
	lda     #$00
	ldy     #$11
	jsr     staspidx
	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	ldy     #$0F
	jsr     ldaxysp
	ldy     #$02
	jsr     staxspidx
	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	ldy     #$0C
	ldx     #$00
	lda     (sp),y
	ldy     #$04
	jsr     staxspidx
	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	ldy     #$13
	ldx     #$00
	lda     (sp),y
	ldy     #$07
	jsr     staspidx
	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	ldy     #$0D
	ldx     #$00
	lda     (sp),y
	ldy     #$08
	jsr     staspidx
	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	ldy     #$0B
	ldx     #$00
	lda     (sp),y
	ldy     #$09
	jsr     staspidx
	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	ldy     #$0A
	ldx     #$00
	lda     (sp),y
	bpl     L0002
	dex
L0002:	ldy     #$0A
	jsr     staspidx
	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	ldy     #$09
	ldx     #$00
	lda     (sp),y
	bpl     L0003
	dex
L0003:	ldy     #$0B
	jsr     staspidx
	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	ldy     #$06
	jsr     staspidx
	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	ldy     #$07
	jsr     ldaxysp
	ldy     #$0C
	jsr     staxspidx
	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	ldy     #$0E
	jsr     staxspidx
	ldy     #$15
	jsr     addysp
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ move_mobs (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_mobs: near

.segment	"CODE"

	jsr     decsp2
	ldx     #$00
	lda     #$00
	ldy     #$00
	jsr     staxysp
L0002:	ldy     #$01
	jsr     ldaxysp
	cmp     #$08
	txa
	sbc     #$00
	bvc     L0006
	eor     #$80
L0006:	asl     a
	lda     #$00
	ldx     #$00
	rol     a
	jne     L0005
	jmp     L0003
L0005:	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	ldx     #$00
	lda     #$14
	jsr     tosmulax
	clc
	adc     #<(_mobs)
	tay
	txa
	adc     #>(_mobs)
	tax
	tya
	ldy     #$00
	jsr     ldauidx
	cmp     #$01
	jsr     booleq
	jeq     L0004
	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	ldx     #$00
	lda     #$14
	jsr     tosmulax
	clc
	adc     #<(_mobs)
	tay
	txa
	adc     #>(_mobs)
	tax
	tya
	jsr     _move_mob
L0004:	ldy     #$01
	jsr     ldaxysp
	ldy     #$00
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L0002
L0003:	jsr     incsp2
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ sprite_switching_bouncy_border_collision_handler (struct MOB *m, enum $anon-enum-0016 type)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sprite_switching_bouncy_border_collision_handler: near

.segment	"CODE"

	jsr     pusha
	ldy     #$02
	jsr     ldaxysp
	cpx     #$00
	bne     L0002
	cmp     #$00
L0002:	jsr     boolne
	jeq     L0003
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	cmp     #$00
	jsr     boolne
	jne     L0004
L0003:	ldx     #$00
	lda     #$00
	jeq     L0005
L0004:	ldx     #$00
	lda     #$01
L0005:	jeq     L0006
	jmp     L0007
L0006:	lda     #<(S0016)
	ldx     #>(S0016)
	jsr     pushax
	ldx     #$01
	lda     #$50
	jsr     __afailed
L0007:	ldy     #$02
	jsr     ldaxysp
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	jsr     _bouncy_border_collision_handler
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	cmp     #$03
	jsr     booleq
	jeq     L0008
	ldy     #$02
	jsr     ldaxysp
	jsr     _prev_sprite_ptr
	jmp     L000A
L0008:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	cmp     #$01
	jsr     booleq
	jeq     L000A
	ldy     #$02
	jsr     ldaxysp
	jsr     _next_sprite_ptr
L000A:	lda     #<(S0017)
	ldx     #>(S0017)
	jsr     pushax
	ldy     #$04
	jsr     ldaxysp
	ldy     #$11
	jsr     ldauidx
	jsr     pushax
	ldy     #$04
	jsr     _printf
	jsr     incsp3
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bouncy_border_collision_handler (struct MOB *m, enum $anon-enum-0016 type)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bouncy_border_collision_handler: near

.segment	"CODE"

	jsr     pusha
	ldy     #$02
	jsr     ldaxysp
	cpx     #$00
	bne     L0002
	cmp     #$00
L0002:	jsr     boolne
	jeq     L0003
	jmp     L0004
L0003:	lda     #<(S0013)
	ldx     #>(S0013)
	jsr     pushax
	ldx     #$01
	lda     #$0F
	jsr     __afailed
L0004:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jmp     L0005
L0005:	cmp     #$01
	jeq     L0008
	cmp     #$02
	jeq     L0009
	cmp     #$03
	jeq     L0007
	cmp     #$04
	jeq     L000A
	jmp     L0006
L0007:	ldy     #$02
	jsr     ldaxysp
	jsr     pushax
	ldx     #$00
	lda     #$13
	ldy     #$02
	jsr     staxspidx
	ldy     #$02
	jsr     ldaxysp
	jsr     pushax
	ldy     #$0A
	jsr     ldaidx
	eor     #$FF
	clc
	adc     #$01
	ldy     #$0A
	jsr     staspidx
	jmp     L0006
L0008:	ldy     #$02
	jsr     ldaxysp
	jsr     pushax
	ldx     #$01
	lda     #$3E
	ldy     #$02
	jsr     staxspidx
	ldy     #$02
	jsr     ldaxysp
	jsr     pushax
	ldy     #$0A
	jsr     ldaidx
	eor     #$FF
	clc
	adc     #$01
	ldy     #$0A
	jsr     staspidx
	jmp     L0006
L0009:	ldy     #$02
	jsr     ldaxysp
	jsr     pushax
	ldx     #$00
	lda     #$33
	ldy     #$04
	jsr     staxspidx
	ldy     #$02
	jsr     ldaxysp
	jsr     pushax
	ldy     #$0B
	jsr     ldaidx
	eor     #$FF
	clc
	adc     #$01
	ldy     #$0B
	jsr     staspidx
	jmp     L0006
L000A:	ldy     #$02
	jsr     ldaxysp
	jsr     pushax
	ldx     #$00
	lda     #$F9
	ldy     #$04
	jsr     staxspidx
	ldy     #$02
	jsr     ldaxysp
	jsr     pushax
	ldy     #$0B
	jsr     ldaidx
	eor     #$FF
	clc
	adc     #$01
	ldy     #$0B
	jsr     staspidx
	jmp     L0006
L0006:	jsr     incsp3
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ velocity_movement_handler (struct MOB *m)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_velocity_movement_handler: near

.segment	"CODE"

	jsr     pushax
	lda     #$00
	jsr     pusha
	ldy     #$02
	jsr     ldaxysp
	cpx     #$00
	bne     L0002
	cmp     #$00
L0002:	jsr     boolne
	jeq     L0003
	jmp     L0004
L0003:	lda     #<(S0014)
	ldx     #>(S0014)
	jsr     pushax
	ldx     #$01
	lda     #$31
	jsr     __afailed
L0004:	ldy     #$02
	jsr     ldaxysp
	jsr     pushax
	ldy     #$03
	jsr     ldaxidx
	jsr     pushax
	ldy     #$06
	jsr     ldaxysp
	ldy     #$0A
	jsr     ldaidx
	jsr     tosaddax
	ldy     #$02
	jsr     staxspidx
	ldy     #$02
	jsr     ldaxysp
	ldy     #$03
	jsr     ldaxidx
	cmp     #$12
	txa
	sbc     #$00
	bvc     L0006
	eor     #$80
L0006:	asl     a
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0005
	ldx     #$00
	lda     #$03
	ldy     #$00
	sta     (sp),y
	jmp     L0008
L0005:	ldy     #$02
	jsr     ldaxysp
	ldy     #$03
	jsr     ldaxidx
	cmp     #$3F
	txa
	sbc     #$01
	bvs     L0009
	eor     #$80
L0009:	asl     a
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0008
	ldx     #$00
	lda     #$01
	ldy     #$00
	sta     (sp),y
L0008:	ldy     #$02
	jsr     ldaxysp
	jsr     pushax
	ldy     #$05
	jsr     ldaxidx
	jsr     pushax
	ldy     #$06
	jsr     ldaxysp
	ldy     #$0B
	jsr     ldaidx
	jsr     tosaddax
	ldy     #$04
	jsr     staxspidx
	ldy     #$02
	jsr     ldaxysp
	ldy     #$05
	jsr     ldaxidx
	cmp     #$32
	txa
	sbc     #$00
	bvc     L000B
	eor     #$80
L000B:	asl     a
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L000A
	ldx     #$00
	lda     #$02
	ldy     #$00
	sta     (sp),y
	jmp     L000D
L000A:	ldy     #$02
	jsr     ldaxysp
	ldy     #$05
	jsr     ldaxidx
	cmp     #$FA
	txa
	sbc     #$00
	bvs     L000E
	eor     #$80
L000E:	asl     a
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L000D
	ldx     #$00
	lda     #$04
	ldy     #$00
	sta     (sp),y
L000D:	ldy     #$02
	jsr     ldaxysp
	ldy     #$0D
	jsr     ldaxidx
	cpx     #$00
	bne     L000F
	cmp     #$00
L000F:	jsr     boolne
	jeq     L0010
	jmp     L0011
L0010:	lda     #<(S0015)
	ldx     #>(S0015)
	jsr     pushax
	ldx     #$01
	lda     #$48
	jsr     __afailed
L0011:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	cmp     #$00
	jsr     boolne
	jeq     L0012
	ldy     #$02
	jsr     ldaxysp
	ldy     #$0D
	jsr     ldaxidx
	jsr     pushax
	ldy     #$04
	jsr     ldaxysp
	jsr     pushax
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	pha
	ldy     #$02
	lda     (sp),y
	sta     jmpvec+1
	iny
	lda     (sp),y
	sta     jmpvec+2
	pla
	jsr     jmpvec
	jsr     incsp2
L0012:	jsr     incsp3
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ load_sprites (char *fn, unsigned char dev)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_sprites: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp2
	ldy     #$04
	jsr     ldaxysp
	jsr     _strlen
	ldx     #$00
	ldy     #$01
	sta     (sp),y
	ldy     #$04
	jsr     ldaxysp
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	jsr     pusha
	ldy     #$05
	lda     (sp),y
	jsr     pusha
	ldx     #$30
	lda     #$00
	jsr     _loadbin
	ldy     #$00
	sta     (sp),y
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jmp     L0001
L0001:	jsr     incsp5
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ init_mobs (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_mobs: near

.segment	"CODE"

	jsr     decsp2
	lda     #<(S0008)
	ldx     #>(S0008)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	ldx     #$00
	lda     #$00
	ldy     #$00
	jsr     staxysp
L0002:	ldy     #$01
	jsr     ldaxysp
	cmp     #$02
	txa
	sbc     #$00
	bvc     L0006
	eor     #$80
L0006:	asl     a
	lda     #$00
	ldx     #$00
	rol     a
	jne     L0005
	jmp     L0003
L0005:	lda     #<(S0009)
	ldx     #>(S0009)
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     pushax
	lda     #<(_blimp_ptrs)
	ldx     #>(_blimp_ptrs)
	ldy     #$04
	clc
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	ldy     #$00
	jsr     ldauidx
	jsr     pushax
	ldy     #$06
	jsr     _printf
	ldy     #$01
	jsr     ldaxysp
	ldy     #$00
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L0002
L0003:	lda     #<(S000A)
	ldx     #>(S000A)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	lda     #$00
	jsr     pusha
	lda     #$01
	jsr     pusha
	lda     #$00
	jsr     pusha
	lda     #$01
	jsr     pusha
	lda     #<(_blimp_ptrs)
	ldx     #>(_blimp_ptrs)
	jsr     pushax
	lda     _blimp_ptr_len
	jsr     pusha
	ldx     #$00
	lda     #$10
	jsr     pushax
	lda     #$00
	jsr     pusha
	lda     #$32
	jsr     pusha
	lda     #$00
	jsr     pusha
	lda     #$02
	jsr     pusha
	lda     #$02
	jsr     pusha
	lda     #$0B
	jsr     pusha
	lda     #<(_sprite_switching_bouncy_border_collision_handler)
	ldx     #>(_sprite_switching_bouncy_border_collision_handler)
	jsr     pushax
	lda     #<(_velocity_movement_handler)
	ldx     #>(_velocity_movement_handler)
	jsr     _init_mob
	jsr     incsp2
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ set_bit (unsigned char *val, unsigned char bit_num, unsigned char bit_val)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_bit: near

.segment	"CODE"

	jsr     pusha
	lda     #<(_pow2)
	ldx     #>(_pow2)
	ldy     #$01
	clc
	adc     (sp),y
	bcc     L0002
	inx
L0002:	ldy     #$00
	jsr     ldauidx
	jsr     pusha
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	cmp     #$09
	jsr     boolult
	jeq     L0003
	jmp     L0004
L0003:	lda     #<(S000B)
	ldx     #>(S000B)
	jsr     pushax
	ldx     #$00
	lda     #$CA
	jsr     __afailed
L0004:	ldy     #$01
	lda     (sp),y
	jeq     L0005
	ldy     #$04
	jsr     ldaxysp
	jsr     pushax
	ldy     #$00
	jsr     ldauidx
	jsr     pushax
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	jsr     tosorax
	ldy     #$00
	jsr     staspidx
	jmp     L0006
L0005:	ldy     #$04
	jsr     ldaxysp
	jsr     pushax
	ldy     #$00
	jsr     ldauidx
	jsr     pushax
	ldx     #$00
	lda     #$FF
	jsr     pushax
	ldy     #$06
	ldx     #$00
	lda     (sp),y
	jsr     tossubax
	jsr     tosandax
	ldy     #$00
	jsr     staspidx
L0006:	jsr     incsp5
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ move_mob (struct MOB *m)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_mob: near

.segment	"CODE"

	jsr     pushax
	ldy     #$01
	jsr     ldaxysp
	ldy     #$0F
	jsr     ldaxidx
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	pha
	ldy     #$00
	lda     (sp),y
	sta     jmpvec+1
	iny
	lda     (sp),y
	sta     jmpvec+2
	pla
	jsr     jmpvec
	jsr     incsp2
	jsr     incsp2
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_mobs (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_mobs: near

.segment	"CODE"

	jsr     decsp1
	ldx     #$00
	lda     #$00
	ldy     #$00
	sta     (sp),y
L0002:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	cmp     #$02
	jsr     boolult
	jne     L0005
	jmp     L0003
L0005:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jsr     pushax
	ldx     #$00
	lda     #$14
	jsr     tosmulax
	clc
	adc     #<(_mobs)
	tay
	txa
	adc     #>(_mobs)
	tax
	tya
	jsr     pushax
	ldy     #$01
	jsr     ldaxysp
	jsr     _draw_mob
	jsr     incsp2
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	ldy     #$00
	ldx     #$00
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	jmp     L0002
L0003:	jsr     incsp1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ dump_mob (struct MOB *m)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_dump_mob: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp1
	lda     #<(S000C)
	ldx     #>(S000C)
	jsr     pushax
	ldy     #$04
	jsr     ldaxysp
	jsr     pushax
	ldy     #$06
	jsr     ldaxysp
	ldy     #$00
	jsr     ldauidx
	jsr     pushax
	ldy     #$06
	jsr     _printf
	lda     #<(S000D)
	ldx     #>(S000D)
	jsr     pushax
	ldy     #$04
	jsr     ldaxysp
	ldy     #$01
	jsr     ldauidx
	jsr     pushax
	ldy     #$06
	jsr     ldaxysp
	ldy     #$13
	jsr     ldaxidx
	jsr     pushax
	ldy     #$08
	jsr     ldaxysp
	ldy     #$11
	jsr     ldauidx
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	jsr     pushax
	ldy     #$06
	jsr     _printf
	lda     #<(S000E)
	ldx     #>(S000E)
	jsr     pushax
	ldy     #$04
	jsr     ldaxysp
	ldy     #$03
	jsr     ldaxidx
	jsr     pushax
	ldy     #$06
	jsr     ldaxysp
	ldy     #$05
	jsr     ldaxidx
	jsr     pushax
	ldy     #$06
	jsr     _printf
	lda     #<(S000F)
	ldx     #>(S000F)
	jsr     pushax
	ldy     #$04
	jsr     ldaxysp
	ldy     #$01
	jsr     ldauidx
	jsr     pushax
	ldy     #$04
	jsr     _printf
	ldy     #$02
	jsr     ldaxysp
	ldy     #$01
	jsr     ldauidx
	ldy     #$00
	sta     (sp),y
	lda     #<(S0010)
	ldx     #>(S0010)
	jsr     pushax
	ldx     #$00
	lda     $D015
	jsr     pushax
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	eor     #$02
	jsr     tosandax
	jsr     pushax
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	jsr     aslax1
	jsr     pushax
	ldx     #$D0
	lda     #$00
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	jsr     pushax
	ldy     #$06
	ldx     #$00
	lda     (sp),y
	jsr     aslax1
	jsr     pushax
	ldx     #$D0
	lda     #$00
	jsr     tosaddax
	ldy     #$01
	jsr     ldauidx
	jsr     pushax
	ldy     #$08
	jsr     _printf
	jsr     incsp3
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_mob (struct MOB *m)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_mob: near

.segment	"CODE"

	jsr     pushax
	ldy     #$01
	jsr     ldaxysp
	ldy     #$00
	jsr     ldauidx
	cmp     #$01
	jsr     booleq
	jeq     L0002
	ldy     #$01
	jsr     ldaxysp
	ldy     #$01
	jsr     ldauidx
	jsr     pusha
	ldx     #$D0
	lda     #$15
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$05
	jsr     ldaxysp
	ldy     #$00
	jsr     ldauidx
	jsr     _set_bit
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jsr     aslax1
	jsr     pushax
	ldx     #$D0
	lda     #$00
	jsr     tosaddax
	jsr     pushax
	ldy     #$04
	jsr     ldaxysp
	ldy     #$04
	jsr     ldauidx
	ldy     #$01
	jsr     staspidx
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	ldy     #$03
	jsr     ldaxysp
	ldy     #$03
	jsr     ldaxidx
	jsr     _set_sprite_x
	lda     _sprite_data_vicptr
	ldx     _sprite_data_vicptr+1
	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     tosaddax
	jsr     pushax
	ldy     #$04
	jsr     ldaxysp
	ldy     #$13
	jsr     ldaxidx
	jsr     pushax
	ldy     #$06
	jsr     ldaxysp
	ldy     #$11
	jsr     ldauidx
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	ldy     #$00
	jsr     staspidx
	ldx     #$D0
	lda     #$1D
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$05
	jsr     ldaxysp
	ldy     #$08
	jsr     ldauidx
	jsr     _set_bit
	ldx     #$D0
	lda     #$17
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$05
	jsr     ldaxysp
	ldy     #$09
	jsr     ldauidx
	jsr     _set_bit
	jsr     incsp1
L0002:	jsr     incsp2
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ next_sprite_ptr (struct MOB *m)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_next_sprite_ptr: near

.segment	"CODE"

	jsr     pushax
	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	ldy     #$11
	jsr     ldauidx
	jsr     incax1
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	ldy     #$10
	jsr     ldauidx
	jsr     tosmodax
	ldx     #$00
	ldy     #$11
	jsr     staspidx
	lda     #<(S0018)
	ldx     #>(S0018)
	jsr     pushax
	ldx     #$01
	lda     #$65
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	ldy     #$11
	jsr     ldauidx
	jsr     pushax
	ldy     #$07
	jsr     ldaxysp
	ldy     #$13
	jsr     ldaxidx
	jsr     pushax
	ldy     #$09
	jsr     ldaxysp
	ldy     #$11
	jsr     ldauidx
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	jsr     pushax
	ldy     #$08
	jsr     _printf
	jsr     incsp2
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ prev_sprite_ptr (struct MOB *m)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_prev_sprite_ptr: near

.segment	"CODE"

	jsr     pushax
	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	ldy     #$11
	jsr     ldauidx
	jsr     decax1
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	ldy     #$10
	jsr     ldauidx
	jsr     tosmodax
	ldx     #$00
	ldy     #$11
	jsr     staspidx
	lda     #<(S0019)
	ldx     #>(S0019)
	jsr     pushax
	ldx     #$01
	lda     #$6A
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	ldy     #$11
	jsr     ldauidx
	jsr     pushax
	ldy     #$07
	jsr     ldaxysp
	ldy     #$13
	jsr     ldaxidx
	jsr     pushax
	ldy     #$09
	jsr     ldaxysp
	ldy     #$11
	jsr     ldauidx
	jsr     tosaddax
	ldy     #$00
	jsr     ldauidx
	jsr     pushax
	ldy     #$08
	jsr     _printf
	jsr     incsp2
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ __cdecl__ main (int argc, char **argv)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	jsr     decsp4
	lda     #<(S0001)
	ldx     #>(S0001)
	jsr     pushax
	lda     #<(S0002)
	ldx     #>(S0002)
	jsr     pushax
	jsr     decsp1
	lda     #$00
	jsr     pusha
	jsr     _clr_screen
	ldx     #$00
	lda     $00BA
	ldy     #$01
	sta     (sp),y
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	cmp     #$08
	jsr     boolult
	jne     L0003
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	cmp     #$20
	lda     #$00
	ldx     #$00
	rol     a
	jne     L0003
	ldx     #$00
	lda     #$00
	jeq     L0004
L0003:	ldx     #$00
	lda     #$01
L0004:	jeq     L0002
	ldx     #$00
	lda     #$08
	ldy     #$01
	sta     (sp),y
L0002:	lda     #<(S0003)
	ldx     #>(S0003)
	jsr     pushax
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	jsr     pushax
	ldy     #$04
	jsr     _printf
	ldy     #$05
	jsr     ldaxysp
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	jsr     _load_sprites
	ldy     #$08
	jsr     staxysp
	ldy     #$09
	jsr     ldaxysp
	cpx     #$00
	bne     L0006
	cmp     #$00
L0006:	jsr     boolne
	jeq     L0005
	lda     #<(S0004)
	ldx     #>(S0004)
	jsr     pushax
	ldy     #$07
	jsr     ldaxysp
	jsr     pushax
	ldy     #$0D
	jsr     ldaxysp
	jsr     pushax
	ldy     #$09
	jsr     ldaxysp
	jsr     pushax
	ldy     #$08
	jsr     _printf
	ldy     #$03
	jsr     ldaxysp
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	jsr     _load_sprites
	ldy     #$06
	jsr     staxysp
	ldy     #$07
	jsr     ldaxysp
	cpx     #$00
	bne     L0008
	cmp     #$00
L0008:	jsr     boolne
	jeq     L0007
	lda     #<(S0005)
	ldx     #>(S0005)
	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	jsr     pushax
	ldy     #$04
	jsr     _printf
	ldy     #$09
	jsr     ldaxysp
	jsr     _exit
L0007:	jmp     L0009
L0005:	lda     #<(S0006)
	ldx     #>(S0006)
	jsr     pushax
	ldy     #$02
	jsr     _printf
L0009:	ldx     #$00
	lda     #$03
	sta     $D015
	ldx     #$00
	lda     #$FF
	sta     $D01C
	ldx     #$00
	lda     #$02
	sta     $D025
	ldx     #$00
	lda     #$01
	sta     $D026
	ldx     #$00
	lda     #$0B
	sta     $D027
	ldx     #$00
	lda     #$0B
	sta     $D028
	lda     #<(S0007)
	ldx     #>(S0007)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	jsr     _init_mobs
	jsr     _draw_mobs
	jmp     L000C
L000A:	jmp     L000D
L000D:	ldx     #$00
	lda     $D012
	cmp     #$FB
	jsr     boolult
	jne     L000D
	jsr     _move_mobs
	jsr     _draw_mobs
L000C:	jmp     L000A
	ldx     #$00
	lda     #$00
	jmp     L0001
L0001:	ldy     #$0E
	jsr     addysp
	rts

.endproc

