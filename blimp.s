ca65 V2.19 - Git 43881af
Main file   : space blimp.s
Current file: space blimp.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.19 - Git 43881af
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.19 - Git 43881af"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.forceimport	initmainargs
000000r 1               	.import		_printf
000000r 1               	.import		_strlen
000000r 1               	.import		_exit
000000r 1               	.export		_set_sprite_x
000000r 1               	.import		_loadbin
000000r 1               	.export		_clr_screen
000000r 1               	.export		_init_mob
000000r 1               	.export		_move_mobs
000000r 1               	.export		_sprite_switching_bouncy_border_collision_handler
000000r 1               	.export		_bouncy_border_collision_handler
000000r 1               	.export		_velocity_movement_handler
000000r 1               	.export		_handle_border_collision
000000r 1               	.export		_load_sprites
000000r 1               	.export		_init_mobs
000000r 1               	.export		_set_bit
000000r 1               	.export		_move_mob
000000r 1               	.export		_draw_mobs
000000r 1               	.export		_mobs
000000r 1               	.export		_sprite_defs
000000r 1               	.export		_sprite_data_vicptr
000000r 1               	.export		_screen
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"DATA"
000000r 1               
000000r 1               _sprite_defs:
000000r 1  00 30        	.word	$3000
000002r 1               _sprite_data_vicptr:
000002r 1  F8 07        	.word	$07F8
000004r 1               _screen:
000004r 1  00 04        	.word	$0400
000006r 1               
000006r 1               .segment	"RODATA"
000000r 1               
000000r 1               S0004:
000000r 1  C6 41 49 4C  	.byte	$C6,$41,$49,$4C,$45,$44,$20,$54,$4F,$20,$4C,$4F,$41,$44,$20,$27
000004r 1  45 44 20 54  
000008r 1  4F 20 4C 4F  
000010r 1  25 53 27 20  	.byte	$25,$53,$27,$20,$57,$49,$54,$48,$20,$45,$52,$52,$4F,$52,$20,$43
000014r 1  57 49 54 48  
000018r 1  20 45 52 52  
000020r 1  4F 44 45 20  	.byte	$4F,$44,$45,$20,$25,$44,$2E,$0D,$20,$D4,$52,$59,$49,$4E,$47,$20
000024r 1  25 44 2E 0D  
000028r 1  20 D4 52 59  
000030r 1  41 4C 54 45  	.byte	$41,$4C,$54,$45,$52,$4E,$41,$54,$45,$20,$46,$49,$4C,$45,$4E,$41
000034r 1  52 4E 41 54  
000038r 1  45 20 46 49  
000040r 1  4D 45 20 27  	.byte	$4D,$45,$20,$27,$25,$53,$27,$2E,$2E,$2E,$0D,$00
000044r 1  25 53 27 2E  
000048r 1  2E 2E 0D 00  
00004Cr 1               S0005:
00004Cr 1  D3 50 52 49  	.byte	$D3,$50,$52,$49,$54,$45,$20,$4C,$4F,$41,$44,$20,$46,$41,$49,$4C
000050r 1  54 45 20 4C  
000054r 1  4F 41 44 20  
00005Cr 1  45 44 20 57  	.byte	$45,$44,$20,$57,$49,$54,$48,$20,$43,$4F,$44,$45,$20,$25,$44,$0D
000060r 1  49 54 48 20  
000064r 1  43 4F 44 45  
00006Cr 1  00           	.byte	$00
00006Dr 1               S0009:
00006Dr 1  2A 2A D6 C5  	.byte	$2A,$2A,$D6,$C5,$CC,$CF,$C3,$C9,$D4,$D9,$A4,$CD,$CF,$D6,$C5,$CD
000071r 1  CC CF C3 C9  
000075r 1  D4 D9 A4 CD  
00007Dr 1  C5 CE D4 A4  	.byte	$C5,$CE,$D4,$A4,$C8,$C1,$CE,$C4,$CC,$C5,$D2,$2A,$2A,$0D,$00
000081r 1  C8 C1 CE C4  
000085r 1  CC C5 D2 2A  
00008Cr 1               S000A:
00008Cr 1  2A 2A 48 41  	.byte	$2A,$2A,$48,$41,$4E,$44,$4C,$45,$A4,$42,$4F,$52,$44,$45,$52,$A4
000090r 1  4E 44 4C 45  
000094r 1  A4 42 4F 52  
00009Cr 1  43 4F 4C 4C  	.byte	$43,$4F,$4C,$4C,$49,$53,$49,$4F,$4E,$2A,$2A,$0D,$00
0000A0r 1  49 53 49 4F  
0000A4r 1  4E 2A 2A 0D  
0000A9r 1               S0007:
0000A9r 1  D3 50 41 43  	.byte	$D3,$50,$41,$43,$45,$20,$C2,$4C,$49,$4D,$50,$2C,$20,$4D,$4F,$54
0000ADr 1  45 20 C2 4C  
0000B1r 1  49 4D 50 2C  
0000B9r 1  48 41 20 4D  	.byte	$48,$41,$20,$4D,$4F,$54,$48,$41,$21,$21,$21,$0D,$00
0000BDr 1  4F 54 48 41  
0000C1r 1  21 21 21 0D  
0000C6r 1               S0006:
0000C6r 1  53 50 52 49  	.byte	$53,$50,$52,$49,$54,$45,$53,$20,$4C,$4F,$41,$44,$45,$44,$21,$0D
0000CAr 1  54 45 53 20  
0000CEr 1  4C 4F 41 44  
0000D6r 1  00           	.byte	$00
0000D7r 1               S0001:
0000D7r 1  53 50 52 49  	.byte	$53,$50,$52,$49,$54,$45,$53,$2E,$50,$52,$47,$00
0000DBr 1  54 45 53 2E  
0000DFr 1  50 52 47 00  
0000E3r 1               S0003:
0000E3r 1  44 45 56 49  	.byte	$44,$45,$56,$49,$43,$45,$3D,$25,$44,$0D,$00
0000E7r 1  43 45 3D 25  
0000EBr 1  44 0D 00     
0000EEr 1               S0002:
0000EEr 1  53 50 52 49  	.byte	$53,$50,$52,$49,$54,$45,$53,$00
0000F2r 1  54 45 53 00  
0000F6r 1               
0000F6r 1               .segment	"BSS"
000000r 1               
000000r 1               _mobs:
000000r 1  00 00 00 00  	.res	32,$00
000004r 1  00 00 00 00  
000008r 1  00 00 00 00  
000020r 1               
000020r 1               ; ---------------------------------------------------------------
000020r 1               ; void __near__ set_sprite_x (unsigned char sprite_num, int x_pos)
000020r 1               ; ---------------------------------------------------------------
000020r 1               
000020r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_set_sprite_x: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  20 rr rr     	jsr     pushax
000003r 1  20 rr rr     	jsr     decsp1
000006r 1  A0 03        	ldy     #$03
000008r 1  A2 00        	ldx     #$00
00000Ar 1  B1 rr        	lda     (sp),y
00000Cr 1  20 rr rr     	jsr     aslax1
00000Fr 1  20 rr rr     	jsr     pushax
000012r 1  A2 D0        	ldx     #$D0
000014r 1  A9 00        	lda     #$00
000016r 1  20 rr rr     	jsr     tosaddax
000019r 1  20 rr rr     	jsr     pushax
00001Cr 1  A0 00        	ldy     #$00
00001Er 1  20 rr rr     	jsr     ldauidx
000021r 1  A0 00        	ldy     #$00
000023r 1  20 rr rr     	jsr     staspidx
000026r 1  A0 02        	ldy     #$02
000028r 1  20 rr rr     	jsr     ldaxysp
00002Br 1  20 rr rr     	jsr     pushax
00002Er 1  A2 01        	ldx     #$01
000030r 1  A9 00        	lda     #$00
000032r 1  20 rr rr     	jsr     tosdivax
000035r 1  A2 00        	ldx     #$00
000037r 1  A0 00        	ldy     #$00
000039r 1  91 rr        	sta     (sp),y
00003Br 1  A2 D0        	ldx     #$D0
00003Dr 1  A9 10        	lda     #$10
00003Fr 1  20 rr rr     	jsr     pushax
000042r 1  A0 05        	ldy     #$05
000044r 1  B1 rr        	lda     (sp),y
000046r 1  20 rr rr     	jsr     pusha
000049r 1  A0 03        	ldy     #$03
00004Br 1  A2 00        	ldx     #$00
00004Dr 1  B1 rr        	lda     (sp),y
00004Fr 1  C9 00        	cmp     #$00
000051r 1  20 rr rr     	jsr     boolne
000054r 1  A2 00        	ldx     #$00
000056r 1  20 rr rr     	jsr     _set_bit
000059r 1  20 rr rr     	jsr     incsp4
00005Cr 1  60           	rts
00005Dr 1               
00005Dr 1               .endproc
00005Dr 1               
00005Dr 1               ; ---------------------------------------------------------------
00005Dr 1               ; void __near__ clr_screen (void)
00005Dr 1               ; ---------------------------------------------------------------
00005Dr 1               
00005Dr 1               .segment	"CODE"
00005Dr 1               
00005Dr 1               .proc	_clr_screen: near
00005Dr 1               
00005Dr 1               .segment	"CODE"
00005Dr 1               
00005Dr 1  20 44 E5     	jsr     $E544
000060r 1  60           	rts
000061r 1               
000061r 1               .endproc
000061r 1               
000061r 1               ; ---------------------------------------------------------------
000061r 1               ; void __near__ init_mob (unsigned char num, unsigned char active, unsigned char sprite_num, unsigned char mcolor, unsigned char sprite_ptr, unsigned int x, unsigned char expand_x, unsigned char y, unsigned char expand_y, signed char xvel, signed char yvel, unsigned char color, void (*coll_handler)(struct MOB *, enum $anon-enum-0013), void (*move_handler)(struct MOB *))
000061r 1               ; ---------------------------------------------------------------
000061r 1               
000061r 1               .segment	"CODE"
000061r 1               
000061r 1               .proc	_init_mob: near
000061r 1               
000061r 1               .segment	"CODE"
000061r 1               
000061r 1  20 rr rr     	jsr     pushax
000064r 1  A0 10        	ldy     #$10
000066r 1  A2 00        	ldx     #$00
000068r 1  B1 rr        	lda     (sp),y
00006Ar 1  20 rr rr     	jsr     aslax4
00006Dr 1  18           	clc
00006Er 1  69 rr        	adc     #<(_mobs)
000070r 1  A8           	tay
000071r 1  8A           	txa
000072r 1  69 rr        	adc     #>(_mobs)
000074r 1  AA           	tax
000075r 1  98           	tya
000076r 1  20 rr rr     	jsr     pushax
000079r 1  A0 01        	ldy     #$01
00007Br 1  20 rr rr     	jsr     ldaxysp
00007Er 1  20 rr rr     	jsr     pushax
000081r 1  A0 13        	ldy     #$13
000083r 1  A2 00        	ldx     #$00
000085r 1  B1 rr        	lda     (sp),y
000087r 1  A0 00        	ldy     #$00
000089r 1  20 rr rr     	jsr     staspidx
00008Cr 1  A0 01        	ldy     #$01
00008Er 1  20 rr rr     	jsr     ldaxysp
000091r 1  20 rr rr     	jsr     pushax
000094r 1  A0 12        	ldy     #$12
000096r 1  A2 00        	ldx     #$00
000098r 1  B1 rr        	lda     (sp),y
00009Ar 1  A0 01        	ldy     #$01
00009Cr 1  20 rr rr     	jsr     staspidx
00009Fr 1  A0 01        	ldy     #$01
0000A1r 1  20 rr rr     	jsr     ldaxysp
0000A4r 1  20 rr rr     	jsr     pushax
0000A7r 1  A0 10        	ldy     #$10
0000A9r 1  A2 00        	ldx     #$00
0000ABr 1  B1 rr        	lda     (sp),y
0000ADr 1  A0 02        	ldy     #$02
0000AFr 1  20 rr rr     	jsr     staspidx
0000B2r 1  A0 01        	ldy     #$01
0000B4r 1  20 rr rr     	jsr     ldaxysp
0000B7r 1  20 rr rr     	jsr     pushax
0000BAr 1  A0 0F        	ldy     #$0F
0000BCr 1  20 rr rr     	jsr     ldaxysp
0000BFr 1  A0 03        	ldy     #$03
0000C1r 1  20 rr rr     	jsr     staxspidx
0000C4r 1  A0 01        	ldy     #$01
0000C6r 1  20 rr rr     	jsr     ldaxysp
0000C9r 1  20 rr rr     	jsr     pushax
0000CCr 1  A0 0C        	ldy     #$0C
0000CEr 1  A2 00        	ldx     #$00
0000D0r 1  B1 rr        	lda     (sp),y
0000D2r 1  A0 05        	ldy     #$05
0000D4r 1  20 rr rr     	jsr     staspidx
0000D7r 1  A0 01        	ldy     #$01
0000D9r 1  20 rr rr     	jsr     ldaxysp
0000DCr 1  20 rr rr     	jsr     pushax
0000DFr 1  A0 11        	ldy     #$11
0000E1r 1  A2 00        	ldx     #$00
0000E3r 1  B1 rr        	lda     (sp),y
0000E5r 1  A0 07        	ldy     #$07
0000E7r 1  20 rr rr     	jsr     staspidx
0000EAr 1  A0 01        	ldy     #$01
0000ECr 1  20 rr rr     	jsr     ldaxysp
0000EFr 1  20 rr rr     	jsr     pushax
0000F2r 1  A0 0D        	ldy     #$0D
0000F4r 1  A2 00        	ldx     #$00
0000F6r 1  B1 rr        	lda     (sp),y
0000F8r 1  A0 08        	ldy     #$08
0000FAr 1  20 rr rr     	jsr     staspidx
0000FDr 1  A0 01        	ldy     #$01
0000FFr 1  20 rr rr     	jsr     ldaxysp
000102r 1  20 rr rr     	jsr     pushax
000105r 1  A0 0B        	ldy     #$0B
000107r 1  A2 00        	ldx     #$00
000109r 1  B1 rr        	lda     (sp),y
00010Br 1  A0 09        	ldy     #$09
00010Dr 1  20 rr rr     	jsr     staspidx
000110r 1  A0 01        	ldy     #$01
000112r 1  20 rr rr     	jsr     ldaxysp
000115r 1  20 rr rr     	jsr     pushax
000118r 1  A0 0A        	ldy     #$0A
00011Ar 1  A2 00        	ldx     #$00
00011Cr 1  B1 rr        	lda     (sp),y
00011Er 1  10 01        	bpl     L0002
000120r 1  CA           	dex
000121r 1  A0 0A        L0002:	ldy     #$0A
000123r 1  20 rr rr     	jsr     staspidx
000126r 1  A0 01        	ldy     #$01
000128r 1  20 rr rr     	jsr     ldaxysp
00012Br 1  20 rr rr     	jsr     pushax
00012Er 1  A0 09        	ldy     #$09
000130r 1  A2 00        	ldx     #$00
000132r 1  B1 rr        	lda     (sp),y
000134r 1  10 01        	bpl     L0003
000136r 1  CA           	dex
000137r 1  A0 0B        L0003:	ldy     #$0B
000139r 1  20 rr rr     	jsr     staspidx
00013Cr 1  A0 01        	ldy     #$01
00013Er 1  20 rr rr     	jsr     ldaxysp
000141r 1  20 rr rr     	jsr     pushax
000144r 1  A0 08        	ldy     #$08
000146r 1  A2 00        	ldx     #$00
000148r 1  B1 rr        	lda     (sp),y
00014Ar 1  A0 06        	ldy     #$06
00014Cr 1  20 rr rr     	jsr     staspidx
00014Fr 1  A0 01        	ldy     #$01
000151r 1  20 rr rr     	jsr     ldaxysp
000154r 1  20 rr rr     	jsr     pushax
000157r 1  A0 07        	ldy     #$07
000159r 1  20 rr rr     	jsr     ldaxysp
00015Cr 1  A0 0C        	ldy     #$0C
00015Er 1  20 rr rr     	jsr     staxspidx
000161r 1  A0 01        	ldy     #$01
000163r 1  20 rr rr     	jsr     ldaxysp
000166r 1  20 rr rr     	jsr     pushax
000169r 1  A0 05        	ldy     #$05
00016Br 1  20 rr rr     	jsr     ldaxysp
00016Er 1  A0 0E        	ldy     #$0E
000170r 1  20 rr rr     	jsr     staxspidx
000173r 1  A0 13        	ldy     #$13
000175r 1  20 rr rr     	jsr     addysp
000178r 1  60           	rts
000179r 1               
000179r 1               .endproc
000179r 1               
000179r 1               ; ---------------------------------------------------------------
000179r 1               ; void __near__ move_mobs (void)
000179r 1               ; ---------------------------------------------------------------
000179r 1               
000179r 1               .segment	"CODE"
000179r 1               
000179r 1               .proc	_move_mobs: near
000179r 1               
000179r 1               .segment	"CODE"
000179r 1               
000179r 1  20 rr rr     	jsr     decsp2
00017Cr 1  A2 00        	ldx     #$00
00017Er 1  A9 00        	lda     #$00
000180r 1  A0 00        	ldy     #$00
000182r 1  20 rr rr     	jsr     staxysp
000185r 1  A0 01        L0002:	ldy     #$01
000187r 1  20 rr rr     	jsr     ldaxysp
00018Ar 1  C9 08        	cmp     #$08
00018Cr 1  8A           	txa
00018Dr 1  E9 00        	sbc     #$00
00018Fr 1  50 02        	bvc     L0006
000191r 1  49 80        	eor     #$80
000193r 1  0A           L0006:	asl     a
000194r 1  A9 00        	lda     #$00
000196r 1  A2 00        	ldx     #$00
000198r 1  2A           	rol     a
000199r 1  F0 03 4C rr  	jne     L0005
00019Dr 1  rr           
00019Er 1  4C rr rr     	jmp     L0003
0001A1r 1  A0 01        L0005:	ldy     #$01
0001A3r 1  20 rr rr     	jsr     ldaxysp
0001A6r 1  20 rr rr     	jsr     aslax4
0001A9r 1  18           	clc
0001AAr 1  69 rr        	adc     #<(_mobs)
0001ACr 1  A8           	tay
0001ADr 1  8A           	txa
0001AEr 1  69 rr        	adc     #>(_mobs)
0001B0r 1  AA           	tax
0001B1r 1  98           	tya
0001B2r 1  20 rr rr     	jsr     _move_mob
0001B5r 1  A0 01        	ldy     #$01
0001B7r 1  20 rr rr     	jsr     ldaxysp
0001BAr 1  A0 00        	ldy     #$00
0001BCr 1  A2 00        	ldx     #$00
0001BEr 1  A9 01        	lda     #$01
0001C0r 1  20 rr rr     	jsr     addeqysp
0001C3r 1  4C rr rr     	jmp     L0002
0001C6r 1  20 rr rr     L0003:	jsr     incsp2
0001C9r 1  60           	rts
0001CAr 1               
0001CAr 1               .endproc
0001CAr 1               
0001CAr 1               ; ---------------------------------------------------------------
0001CAr 1               ; void __near__ sprite_switching_bouncy_border_collision_handler (struct MOB *mob, enum $anon-enum-0013 type)
0001CAr 1               ; ---------------------------------------------------------------
0001CAr 1               
0001CAr 1               .segment	"CODE"
0001CAr 1               
0001CAr 1               .proc	_sprite_switching_bouncy_border_collision_handler: near
0001CAr 1               
0001CAr 1               .segment	"CODE"
0001CAr 1               
0001CAr 1  20 rr rr     	jsr     pusha
0001CDr 1  A0 02        	ldy     #$02
0001CFr 1  20 rr rr     	jsr     ldaxysp
0001D2r 1  20 rr rr     	jsr     pushax
0001D5r 1  A0 02        	ldy     #$02
0001D7r 1  B1 rr        	lda     (sp),y
0001D9r 1  20 rr rr     	jsr     _bouncy_border_collision_handler
0001DCr 1  A0 00        	ldy     #$00
0001DEr 1  A2 00        	ldx     #$00
0001E0r 1  B1 rr        	lda     (sp),y
0001E2r 1  C9 02        	cmp     #$02
0001E4r 1  20 rr rr     	jsr     booleq
0001E7r 1  D0 03 4C rr  	jeq     L0002
0001EBr 1  rr           
0001ECr 1  A0 02        	ldy     #$02
0001EEr 1  20 rr rr     	jsr     ldaxysp
0001F1r 1  20 rr rr     	jsr     pushax
0001F4r 1  A0 02        	ldy     #$02
0001F6r 1  20 rr rr     	jsr     ldauidx
0001F9r 1  18           	clc
0001FAr 1  69 01        	adc     #$01
0001FCr 1  A0 02        	ldy     #$02
0001FEr 1  20 rr rr     	jsr     staspidx
000201r 1  4C rr rr     	jmp     L0004
000204r 1  A0 00        L0002:	ldy     #$00
000206r 1  A2 00        	ldx     #$00
000208r 1  B1 rr        	lda     (sp),y
00020Ar 1  C9 00        	cmp     #$00
00020Cr 1  20 rr rr     	jsr     booleq
00020Fr 1  D0 03 4C rr  	jeq     L0004
000213r 1  rr           
000214r 1  A0 02        	ldy     #$02
000216r 1  20 rr rr     	jsr     ldaxysp
000219r 1  20 rr rr     	jsr     pushax
00021Cr 1  A0 02        	ldy     #$02
00021Er 1  20 rr rr     	jsr     ldauidx
000221r 1  38           	sec
000222r 1  E9 01        	sbc     #$01
000224r 1  A0 02        	ldy     #$02
000226r 1  20 rr rr     	jsr     staspidx
000229r 1  20 rr rr     L0004:	jsr     incsp3
00022Cr 1  60           	rts
00022Dr 1               
00022Dr 1               .endproc
00022Dr 1               
00022Dr 1               ; ---------------------------------------------------------------
00022Dr 1               ; void __near__ bouncy_border_collision_handler (struct MOB *mob, enum $anon-enum-0013 type)
00022Dr 1               ; ---------------------------------------------------------------
00022Dr 1               
00022Dr 1               .segment	"CODE"
00022Dr 1               
00022Dr 1               .proc	_bouncy_border_collision_handler: near
00022Dr 1               
00022Dr 1               .segment	"CODE"
00022Dr 1               
00022Dr 1  20 rr rr     	jsr     pusha
000230r 1  A0 00        	ldy     #$00
000232r 1  A2 00        	ldx     #$00
000234r 1  B1 rr        	lda     (sp),y
000236r 1  C9 02        	cmp     #$02
000238r 1  20 rr rr     	jsr     booleq
00023Br 1  F0 03 4C rr  	jne     L0003
00023Fr 1  rr           
000240r 1  A0 00        	ldy     #$00
000242r 1  A2 00        	ldx     #$00
000244r 1  B1 rr        	lda     (sp),y
000246r 1  C9 00        	cmp     #$00
000248r 1  20 rr rr     	jsr     booleq
00024Br 1  F0 03 4C rr  	jne     L0003
00024Fr 1  rr           
000250r 1  A2 00        	ldx     #$00
000252r 1  A9 00        	lda     #$00
000254r 1  D0 03 4C rr  	jeq     L0004
000258r 1  rr           
000259r 1  A2 00        L0003:	ldx     #$00
00025Br 1  A9 01        	lda     #$01
00025Dr 1  D0 03 4C rr  L0004:	jeq     L0002
000261r 1  rr           
000262r 1  A0 02        	ldy     #$02
000264r 1  20 rr rr     	jsr     ldaxysp
000267r 1  20 rr rr     	jsr     pushax
00026Ar 1  A0 0A        	ldy     #$0A
00026Cr 1  20 rr rr     	jsr     ldaidx
00026Fr 1  49 FF        	eor     #$FF
000271r 1  18           	clc
000272r 1  69 01        	adc     #$01
000274r 1  A0 0A        	ldy     #$0A
000276r 1  20 rr rr     	jsr     staspidx
000279r 1  4C rr rr     	jmp     L0006
00027Cr 1  A0 00        L0002:	ldy     #$00
00027Er 1  A2 00        	ldx     #$00
000280r 1  B1 rr        	lda     (sp),y
000282r 1  C9 01        	cmp     #$01
000284r 1  20 rr rr     	jsr     booleq
000287r 1  F0 03 4C rr  	jne     L0007
00028Br 1  rr           
00028Cr 1  A0 00        	ldy     #$00
00028Er 1  A2 00        	ldx     #$00
000290r 1  B1 rr        	lda     (sp),y
000292r 1  C9 03        	cmp     #$03
000294r 1  20 rr rr     	jsr     booleq
000297r 1  F0 03 4C rr  	jne     L0007
00029Br 1  rr           
00029Cr 1  A2 00        	ldx     #$00
00029Er 1  A9 00        	lda     #$00
0002A0r 1  D0 03 4C rr  	jeq     L0008
0002A4r 1  rr           
0002A5r 1  A2 00        L0007:	ldx     #$00
0002A7r 1  A9 01        	lda     #$01
0002A9r 1  D0 03 4C rr  L0008:	jeq     L0006
0002ADr 1  rr           
0002AEr 1  A0 02        	ldy     #$02
0002B0r 1  20 rr rr     	jsr     ldaxysp
0002B3r 1  20 rr rr     	jsr     pushax
0002B6r 1  A0 0B        	ldy     #$0B
0002B8r 1  20 rr rr     	jsr     ldaidx
0002BBr 1  49 FF        	eor     #$FF
0002BDr 1  18           	clc
0002BEr 1  69 01        	adc     #$01
0002C0r 1  A0 0B        	ldy     #$0B
0002C2r 1  20 rr rr     	jsr     staspidx
0002C5r 1  20 rr rr     L0006:	jsr     incsp3
0002C8r 1  60           	rts
0002C9r 1               
0002C9r 1               .endproc
0002C9r 1               
0002C9r 1               ; ---------------------------------------------------------------
0002C9r 1               ; void __near__ velocity_movement_handler (struct MOB *mob)
0002C9r 1               ; ---------------------------------------------------------------
0002C9r 1               
0002C9r 1               .segment	"CODE"
0002C9r 1               
0002C9r 1               .proc	_velocity_movement_handler: near
0002C9r 1               
0002C9r 1               .segment	"CODE"
0002C9r 1               
0002C9r 1  20 rr rr     	jsr     pushax
0002CCr 1  A9 rr        	lda     #<(S0009)
0002CEr 1  A2 rr        	ldx     #>(S0009)
0002D0r 1  20 rr rr     	jsr     pushax
0002D3r 1  A0 02        	ldy     #$02
0002D5r 1  20 rr rr     	jsr     _printf
0002D8r 1  20 rr rr     	jsr     incsp2
0002DBr 1  60           	rts
0002DCr 1               
0002DCr 1               .endproc
0002DCr 1               
0002DCr 1               ; ---------------------------------------------------------------
0002DCr 1               ; void __near__ handle_border_collision (struct MOB *mob, enum $anon-enum-0013 type)
0002DCr 1               ; ---------------------------------------------------------------
0002DCr 1               
0002DCr 1               .segment	"CODE"
0002DCr 1               
0002DCr 1               .proc	_handle_border_collision: near
0002DCr 1               
0002DCr 1               .segment	"CODE"
0002DCr 1               
0002DCr 1  20 rr rr     	jsr     pusha
0002DFr 1  A9 rr        	lda     #<(S000A)
0002E1r 1  A2 rr        	ldx     #>(S000A)
0002E3r 1  20 rr rr     	jsr     pushax
0002E6r 1  A0 02        	ldy     #$02
0002E8r 1  20 rr rr     	jsr     _printf
0002EBr 1  20 rr rr     	jsr     incsp3
0002EEr 1  60           	rts
0002EFr 1               
0002EFr 1               .endproc
0002EFr 1               
0002EFr 1               ; ---------------------------------------------------------------
0002EFr 1               ; int __near__ load_sprites (char *fn, unsigned char dev)
0002EFr 1               ; ---------------------------------------------------------------
0002EFr 1               
0002EFr 1               .segment	"CODE"
0002EFr 1               
0002EFr 1               .proc	_load_sprites: near
0002EFr 1               
0002EFr 1               .segment	"CODE"
0002EFr 1               
0002EFr 1  20 rr rr     	jsr     pusha
0002F2r 1  20 rr rr     	jsr     decsp2
0002F5r 1  A0 04        	ldy     #$04
0002F7r 1  20 rr rr     	jsr     ldaxysp
0002FAr 1  20 rr rr     	jsr     _strlen
0002FDr 1  A2 00        	ldx     #$00
0002FFr 1  A0 01        	ldy     #$01
000301r 1  91 rr        	sta     (sp),y
000303r 1  A0 04        	ldy     #$04
000305r 1  20 rr rr     	jsr     ldaxysp
000308r 1  20 rr rr     	jsr     pushax
00030Br 1  A0 03        	ldy     #$03
00030Dr 1  B1 rr        	lda     (sp),y
00030Fr 1  20 rr rr     	jsr     pusha
000312r 1  A0 05        	ldy     #$05
000314r 1  B1 rr        	lda     (sp),y
000316r 1  20 rr rr     	jsr     pusha
000319r 1  A2 30        	ldx     #$30
00031Br 1  A9 00        	lda     #$00
00031Dr 1  20 rr rr     	jsr     _loadbin
000320r 1  A0 00        	ldy     #$00
000322r 1  91 rr        	sta     (sp),y
000324r 1  A0 00        	ldy     #$00
000326r 1  A2 00        	ldx     #$00
000328r 1  B1 rr        	lda     (sp),y
00032Ar 1  4C rr rr     	jmp     L0001
00032Dr 1  20 rr rr     L0001:	jsr     incsp5
000330r 1  60           	rts
000331r 1               
000331r 1               .endproc
000331r 1               
000331r 1               ; ---------------------------------------------------------------
000331r 1               ; void __near__ init_mobs (void)
000331r 1               ; ---------------------------------------------------------------
000331r 1               
000331r 1               .segment	"CODE"
000331r 1               
000331r 1               .proc	_init_mobs: near
000331r 1               
000331r 1               .segment	"CODE"
000331r 1               
000331r 1  A9 00        	lda     #$00
000333r 1  20 rr rr     	jsr     pusha
000336r 1  A9 01        	lda     #$01
000338r 1  20 rr rr     	jsr     pusha
00033Br 1  A9 00        	lda     #$00
00033Dr 1  20 rr rr     	jsr     pusha
000340r 1  A9 00        	lda     #$00
000342r 1  20 rr rr     	jsr     pusha
000345r 1  A9 C1        	lda     #$C1
000347r 1  20 rr rr     	jsr     pusha
00034Ar 1  A2 00        	ldx     #$00
00034Cr 1  A9 10        	lda     #$10
00034Er 1  20 rr rr     	jsr     pushax
000351r 1  A9 00        	lda     #$00
000353r 1  20 rr rr     	jsr     pusha
000356r 1  A9 32        	lda     #$32
000358r 1  20 rr rr     	jsr     pusha
00035Br 1  A9 00        	lda     #$00
00035Dr 1  20 rr rr     	jsr     pusha
000360r 1  A9 01        	lda     #$01
000362r 1  20 rr rr     	jsr     pusha
000365r 1  A9 00        	lda     #$00
000367r 1  20 rr rr     	jsr     pusha
00036Ar 1  A9 0B        	lda     #$0B
00036Cr 1  20 rr rr     	jsr     pusha
00036Fr 1  A9 rr        	lda     #<(_sprite_switching_bouncy_border_collision_handler)
000371r 1  A2 rr        	ldx     #>(_sprite_switching_bouncy_border_collision_handler)
000373r 1  20 rr rr     	jsr     pushax
000376r 1  A9 rr        	lda     #<(_velocity_movement_handler)
000378r 1  A2 rr        	ldx     #>(_velocity_movement_handler)
00037Ar 1  20 rr rr     	jsr     _init_mob
00037Dr 1  60           	rts
00037Er 1               
00037Er 1               .endproc
00037Er 1               
00037Er 1               ; ---------------------------------------------------------------
00037Er 1               ; void __near__ set_bit (unsigned char *val, unsigned char bit_num, unsigned char bit_val)
00037Er 1               ; ---------------------------------------------------------------
00037Er 1               
00037Er 1               .segment	"CODE"
00037Er 1               
00037Er 1               .proc	_set_bit: near
00037Er 1               
00037Er 1               .segment	"CODE"
00037Er 1               
00037Er 1  20 rr rr     	jsr     pusha
000381r 1  A0 01        	ldy     #$01
000383r 1  A2 00        	ldx     #$00
000385r 1  B1 rr        	lda     (sp),y
000387r 1  49 02        	eor     #$02
000389r 1  A2 00        	ldx     #$00
00038Br 1  20 rr rr     	jsr     pusha
00038Er 1  A0 01        	ldy     #$01
000390r 1  B1 rr        	lda     (sp),y
000392r 1  D0 03 4C rr  	jeq     L0002
000396r 1  rr           
000397r 1  A0 04        	ldy     #$04
000399r 1  20 rr rr     	jsr     ldaxysp
00039Cr 1  20 rr rr     	jsr     pushax
00039Fr 1  A0 00        	ldy     #$00
0003A1r 1  20 rr rr     	jsr     ldauidx
0003A4r 1  20 rr rr     	jsr     pushax
0003A7r 1  A0 04        	ldy     #$04
0003A9r 1  A2 00        	ldx     #$00
0003ABr 1  B1 rr        	lda     (sp),y
0003ADr 1  20 rr rr     	jsr     tosorax
0003B0r 1  A0 00        	ldy     #$00
0003B2r 1  20 rr rr     	jsr     staspidx
0003B5r 1  4C rr rr     	jmp     L0003
0003B8r 1  A0 04        L0002:	ldy     #$04
0003BAr 1  20 rr rr     	jsr     ldaxysp
0003BDr 1  20 rr rr     	jsr     pushax
0003C0r 1  A0 00        	ldy     #$00
0003C2r 1  20 rr rr     	jsr     ldauidx
0003C5r 1  20 rr rr     	jsr     pushax
0003C8r 1  A2 00        	ldx     #$00
0003CAr 1  A9 FF        	lda     #$FF
0003CCr 1  20 rr rr     	jsr     pushax
0003CFr 1  A0 06        	ldy     #$06
0003D1r 1  A2 00        	ldx     #$00
0003D3r 1  B1 rr        	lda     (sp),y
0003D5r 1  20 rr rr     	jsr     tossubax
0003D8r 1  20 rr rr     	jsr     tosandax
0003DBr 1  A0 00        	ldy     #$00
0003DDr 1  20 rr rr     	jsr     staspidx
0003E0r 1  20 rr rr     L0003:	jsr     incsp5
0003E3r 1  60           	rts
0003E4r 1               
0003E4r 1               .endproc
0003E4r 1               
0003E4r 1               ; ---------------------------------------------------------------
0003E4r 1               ; void __near__ move_mob (struct MOB *m)
0003E4r 1               ; ---------------------------------------------------------------
0003E4r 1               
0003E4r 1               .segment	"CODE"
0003E4r 1               
0003E4r 1               .proc	_move_mob: near
0003E4r 1               
0003E4r 1               .segment	"CODE"
0003E4r 1               
0003E4r 1  20 rr rr     	jsr     pushax
0003E7r 1  A9 00        	lda     #$00
0003E9r 1  20 rr rr     	jsr     pusha
0003ECr 1  A0 02        	ldy     #$02
0003EEr 1  20 rr rr     	jsr     ldaxysp
0003F1r 1  20 rr rr     	jsr     pushax
0003F4r 1  A0 04        	ldy     #$04
0003F6r 1  20 rr rr     	jsr     ldaxidx
0003F9r 1  20 rr rr     	jsr     pushax
0003FCr 1  A0 06        	ldy     #$06
0003FEr 1  20 rr rr     	jsr     ldaxysp
000401r 1  A0 0A        	ldy     #$0A
000403r 1  20 rr rr     	jsr     ldaidx
000406r 1  20 rr rr     	jsr     tosaddax
000409r 1  A0 03        	ldy     #$03
00040Br 1  20 rr rr     	jsr     staxspidx
00040Er 1  A0 02        	ldy     #$02
000410r 1  20 rr rr     	jsr     ldaxysp
000413r 1  A0 04        	ldy     #$04
000415r 1  20 rr rr     	jsr     ldaxidx
000418r 1  E0 00        	cpx     #$00
00041Ar 1  D0 02        	bne     L0003
00041Cr 1  C9 10        	cmp     #$10
00041Er 1  20 rr rr     L0003:	jsr     boolult
000421r 1  D0 03 4C rr  	jeq     L0002
000425r 1  rr           
000426r 1  A2 00        	ldx     #$00
000428r 1  A9 02        	lda     #$02
00042Ar 1  A0 00        	ldy     #$00
00042Cr 1  91 rr        	sta     (sp),y
00042Er 1  4C rr rr     	jmp     L0005
000431r 1  A0 02        L0002:	ldy     #$02
000433r 1  20 rr rr     	jsr     ldaxysp
000436r 1  A0 04        	ldy     #$04
000438r 1  20 rr rr     	jsr     ldaxidx
00043Br 1  C9 40        	cmp     #$40
00043Dr 1  8A           	txa
00043Er 1  E9 01        	sbc     #$01
000440r 1  A9 00        	lda     #$00
000442r 1  A2 00        	ldx     #$00
000444r 1  2A           	rol     a
000445r 1  D0 03 4C rr  	jeq     L0005
000449r 1  rr           
00044Ar 1  A2 00        	ldx     #$00
00044Cr 1  A9 00        	lda     #$00
00044Er 1  A0 00        	ldy     #$00
000450r 1  91 rr        	sta     (sp),y
000452r 1  A0 02        L0005:	ldy     #$02
000454r 1  20 rr rr     	jsr     ldaxysp
000457r 1  20 rr rr     	jsr     pushax
00045Ar 1  A0 05        	ldy     #$05
00045Cr 1  20 rr rr     	jsr     ldauidx
00045Fr 1  20 rr rr     	jsr     pushax
000462r 1  A0 06        	ldy     #$06
000464r 1  20 rr rr     	jsr     ldaxysp
000467r 1  A0 0B        	ldy     #$0B
000469r 1  20 rr rr     	jsr     ldaidx
00046Cr 1  20 rr rr     	jsr     tosaddax
00046Fr 1  A0 05        	ldy     #$05
000471r 1  20 rr rr     	jsr     staspidx
000474r 1  A0 02        	ldy     #$02
000476r 1  20 rr rr     	jsr     ldaxysp
000479r 1  A0 05        	ldy     #$05
00047Br 1  20 rr rr     	jsr     ldauidx
00047Er 1  C9 32        	cmp     #$32
000480r 1  20 rr rr     	jsr     boolult
000483r 1  D0 03 4C rr  	jeq     L0006
000487r 1  rr           
000488r 1  A2 00        	ldx     #$00
00048Ar 1  A9 01        	lda     #$01
00048Cr 1  A0 00        	ldy     #$00
00048Er 1  91 rr        	sta     (sp),y
000490r 1  4C rr rr     	jmp     L0008
000493r 1  A0 02        L0006:	ldy     #$02
000495r 1  20 rr rr     	jsr     ldaxysp
000498r 1  A0 05        	ldy     #$05
00049Ar 1  20 rr rr     	jsr     ldauidx
00049Dr 1  C9 FB        	cmp     #$FB
00049Fr 1  A9 00        	lda     #$00
0004A1r 1  A2 00        	ldx     #$00
0004A3r 1  2A           	rol     a
0004A4r 1  D0 03 4C rr  	jeq     L0008
0004A8r 1  rr           
0004A9r 1  A2 00        	ldx     #$00
0004ABr 1  A9 03        	lda     #$03
0004ADr 1  A0 00        	ldy     #$00
0004AFr 1  91 rr        	sta     (sp),y
0004B1r 1  A0 00        L0008:	ldy     #$00
0004B3r 1  A2 00        	ldx     #$00
0004B5r 1  B1 rr        	lda     (sp),y
0004B7r 1  C9 00        	cmp     #$00
0004B9r 1  20 rr rr     	jsr     boolne
0004BCr 1  D0 03 4C rr  	jeq     L0009
0004C0r 1  rr           
0004C1r 1  A0 02        	ldy     #$02
0004C3r 1  20 rr rr     	jsr     ldaxysp
0004C6r 1  A0 0D        	ldy     #$0D
0004C8r 1  20 rr rr     	jsr     ldaxidx
0004CBr 1  20 rr rr     	jsr     pushax
0004CEr 1  A0 04        	ldy     #$04
0004D0r 1  20 rr rr     	jsr     ldaxysp
0004D3r 1  20 rr rr     	jsr     pushax
0004D6r 1  A0 04        	ldy     #$04
0004D8r 1  B1 rr        	lda     (sp),y
0004DAr 1  48           	pha
0004DBr 1  A0 02        	ldy     #$02
0004DDr 1  B1 rr        	lda     (sp),y
0004DFr 1  8D rr rr     	sta     jmpvec+1
0004E2r 1  C8           	iny
0004E3r 1  B1 rr        	lda     (sp),y
0004E5r 1  8D rr rr     	sta     jmpvec+2
0004E8r 1  68           	pla
0004E9r 1  20 rr rr     	jsr     jmpvec
0004ECr 1  20 rr rr     	jsr     incsp2
0004EFr 1  20 rr rr     L0009:	jsr     incsp3
0004F2r 1  60           	rts
0004F3r 1               
0004F3r 1               .endproc
0004F3r 1               
0004F3r 1               ; ---------------------------------------------------------------
0004F3r 1               ; void __near__ draw_mobs (void)
0004F3r 1               ; ---------------------------------------------------------------
0004F3r 1               
0004F3r 1               .segment	"CODE"
0004F3r 1               
0004F3r 1               .proc	_draw_mobs: near
0004F3r 1               
0004F3r 1               .segment	"CODE"
0004F3r 1               
0004F3r 1  20 rr rr     	jsr     decsp1
0004F6r 1  A2 00        	ldx     #$00
0004F8r 1  A9 00        	lda     #$00
0004FAr 1  A0 00        	ldy     #$00
0004FCr 1  91 rr        	sta     (sp),y
0004FEr 1  A0 00        L0002:	ldy     #$00
000500r 1  A2 00        	ldx     #$00
000502r 1  B1 rr        	lda     (sp),y
000504r 1  C9 02        	cmp     #$02
000506r 1  20 rr rr     	jsr     boolult
000509r 1  F0 03 4C rr  	jne     L0005
00050Dr 1  rr           
00050Er 1  4C rr rr     	jmp     L0003
000511r 1  A0 00        L0005:	ldy     #$00
000513r 1  A2 00        	ldx     #$00
000515r 1  B1 rr        	lda     (sp),y
000517r 1  20 rr rr     	jsr     aslax4
00051Ar 1  18           	clc
00051Br 1  69 rr        	adc     #<(_mobs)
00051Dr 1  A8           	tay
00051Er 1  8A           	txa
00051Fr 1  69 rr        	adc     #>(_mobs)
000521r 1  AA           	tax
000522r 1  98           	tya
000523r 1  20 rr rr     	jsr     pushax
000526r 1  A0 01        	ldy     #$01
000528r 1  20 rr rr     	jsr     ldaxysp
00052Br 1  A0 01        	ldy     #$01
00052Dr 1  20 rr rr     	jsr     ldauidx
000530r 1  20 rr rr     	jsr     pusha
000533r 1  A2 D0        	ldx     #$D0
000535r 1  A9 15        	lda     #$15
000537r 1  20 rr rr     	jsr     pushax
00053Ar 1  A0 02        	ldy     #$02
00053Cr 1  B1 rr        	lda     (sp),y
00053Er 1  20 rr rr     	jsr     pusha
000541r 1  A0 05        	ldy     #$05
000543r 1  20 rr rr     	jsr     ldaxysp
000546r 1  A0 00        	ldy     #$00
000548r 1  20 rr rr     	jsr     ldauidx
00054Br 1  20 rr rr     	jsr     _set_bit
00054Er 1  A0 00        	ldy     #$00
000550r 1  A2 00        	ldx     #$00
000552r 1  B1 rr        	lda     (sp),y
000554r 1  20 rr rr     	jsr     aslax1
000557r 1  20 rr rr     	jsr     pushax
00055Ar 1  A2 D0        	ldx     #$D0
00055Cr 1  A9 00        	lda     #$00
00055Er 1  20 rr rr     	jsr     tosaddax
000561r 1  20 rr rr     	jsr     pushax
000564r 1  A0 04        	ldy     #$04
000566r 1  20 rr rr     	jsr     ldaxysp
000569r 1  A0 05        	ldy     #$05
00056Br 1  20 rr rr     	jsr     ldauidx
00056Er 1  A0 01        	ldy     #$01
000570r 1  20 rr rr     	jsr     staspidx
000573r 1  A0 00        	ldy     #$00
000575r 1  B1 rr        	lda     (sp),y
000577r 1  20 rr rr     	jsr     pusha
00057Ar 1  A0 01        	ldy     #$01
00057Cr 1  A2 00        	ldx     #$00
00057Er 1  B1 rr        	lda     (sp),y
000580r 1  20 rr rr     	jsr     aslax1
000583r 1  20 rr rr     	jsr     pushax
000586r 1  A2 D0        	ldx     #$D0
000588r 1  A9 00        	lda     #$00
00058Ar 1  20 rr rr     	jsr     tosaddax
00058Dr 1  A0 00        	ldy     #$00
00058Fr 1  20 rr rr     	jsr     ldauidx
000592r 1  20 rr rr     	jsr     _set_sprite_x
000595r 1  AD rr rr     	lda     _sprite_data_vicptr
000598r 1  AE rr rr     	ldx     _sprite_data_vicptr+1
00059Br 1  20 rr rr     	jsr     pushax
00059Er 1  A0 02        	ldy     #$02
0005A0r 1  A2 00        	ldx     #$00
0005A2r 1  B1 rr        	lda     (sp),y
0005A4r 1  20 rr rr     	jsr     tosaddax
0005A7r 1  20 rr rr     	jsr     pushax
0005AAr 1  A0 04        	ldy     #$04
0005ACr 1  20 rr rr     	jsr     ldaxysp
0005AFr 1  A0 02        	ldy     #$02
0005B1r 1  20 rr rr     	jsr     ldauidx
0005B4r 1  A0 00        	ldy     #$00
0005B6r 1  20 rr rr     	jsr     staspidx
0005B9r 1  A2 D0        	ldx     #$D0
0005BBr 1  A9 1D        	lda     #$1D
0005BDr 1  20 rr rr     	jsr     pushax
0005C0r 1  A0 02        	ldy     #$02
0005C2r 1  B1 rr        	lda     (sp),y
0005C4r 1  20 rr rr     	jsr     pusha
0005C7r 1  A0 05        	ldy     #$05
0005C9r 1  20 rr rr     	jsr     ldaxysp
0005CCr 1  A0 08        	ldy     #$08
0005CEr 1  20 rr rr     	jsr     ldauidx
0005D1r 1  20 rr rr     	jsr     _set_bit
0005D4r 1  A2 D0        	ldx     #$D0
0005D6r 1  A9 17        	lda     #$17
0005D8r 1  20 rr rr     	jsr     pushax
0005DBr 1  A0 02        	ldy     #$02
0005DDr 1  B1 rr        	lda     (sp),y
0005DFr 1  20 rr rr     	jsr     pusha
0005E2r 1  A0 05        	ldy     #$05
0005E4r 1  20 rr rr     	jsr     ldaxysp
0005E7r 1  A0 09        	ldy     #$09
0005E9r 1  20 rr rr     	jsr     ldauidx
0005ECr 1  20 rr rr     	jsr     _set_bit
0005EFr 1  20 rr rr     	jsr     incsp3
0005F2r 1  A0 00        	ldy     #$00
0005F4r 1  A2 00        	ldx     #$00
0005F6r 1  B1 rr        	lda     (sp),y
0005F8r 1  A0 00        	ldy     #$00
0005FAr 1  A2 00        	ldx     #$00
0005FCr 1  18           	clc
0005FDr 1  A9 01        	lda     #$01
0005FFr 1  71 rr        	adc     (sp),y
000601r 1  91 rr        	sta     (sp),y
000603r 1  4C rr rr     	jmp     L0002
000606r 1  20 rr rr     L0003:	jsr     incsp1
000609r 1  60           	rts
00060Ar 1               
00060Ar 1               .endproc
00060Ar 1               
00060Ar 1               ; ---------------------------------------------------------------
00060Ar 1               ; int __near__ __cdecl__ main (int argc, char **argv)
00060Ar 1               ; ---------------------------------------------------------------
00060Ar 1               
00060Ar 1               .segment	"CODE"
00060Ar 1               
00060Ar 1               .proc	_main: near
00060Ar 1               
00060Ar 1               .segment	"CODE"
00060Ar 1               
00060Ar 1  20 rr rr     	jsr     decsp4
00060Dr 1  A9 rr        	lda     #<(S0001)
00060Fr 1  A2 rr        	ldx     #>(S0001)
000611r 1  20 rr rr     	jsr     pushax
000614r 1  A9 rr        	lda     #<(S0002)
000616r 1  A2 rr        	ldx     #>(S0002)
000618r 1  20 rr rr     	jsr     pushax
00061Br 1  20 rr rr     	jsr     decsp1
00061Er 1  20 rr rr     	jsr     _clr_screen
000621r 1  A2 00        	ldx     #$00
000623r 1  A5 BA        	lda     $00BA
000625r 1  A0 00        	ldy     #$00
000627r 1  91 rr        	sta     (sp),y
000629r 1  A0 00        	ldy     #$00
00062Br 1  A2 00        	ldx     #$00
00062Dr 1  B1 rr        	lda     (sp),y
00062Fr 1  C9 08        	cmp     #$08
000631r 1  20 rr rr     	jsr     boolult
000634r 1  F0 03 4C rr  	jne     L0003
000638r 1  rr           
000639r 1  A0 00        	ldy     #$00
00063Br 1  A2 00        	ldx     #$00
00063Dr 1  B1 rr        	lda     (sp),y
00063Fr 1  C9 20        	cmp     #$20
000641r 1  A9 00        	lda     #$00
000643r 1  A2 00        	ldx     #$00
000645r 1  2A           	rol     a
000646r 1  F0 03 4C rr  	jne     L0003
00064Ar 1  rr           
00064Br 1  A2 00        	ldx     #$00
00064Dr 1  A9 00        	lda     #$00
00064Fr 1  D0 03 4C rr  	jeq     L0004
000653r 1  rr           
000654r 1  A2 00        L0003:	ldx     #$00
000656r 1  A9 01        	lda     #$01
000658r 1  D0 03 4C rr  L0004:	jeq     L0002
00065Cr 1  rr           
00065Dr 1  A2 00        	ldx     #$00
00065Fr 1  A9 08        	lda     #$08
000661r 1  A0 00        	ldy     #$00
000663r 1  91 rr        	sta     (sp),y
000665r 1  A9 rr        L0002:	lda     #<(S0003)
000667r 1  A2 rr        	ldx     #>(S0003)
000669r 1  20 rr rr     	jsr     pushax
00066Cr 1  A0 02        	ldy     #$02
00066Er 1  A2 00        	ldx     #$00
000670r 1  B1 rr        	lda     (sp),y
000672r 1  20 rr rr     	jsr     pushax
000675r 1  A0 04        	ldy     #$04
000677r 1  20 rr rr     	jsr     _printf
00067Ar 1  A0 04        	ldy     #$04
00067Cr 1  20 rr rr     	jsr     ldaxysp
00067Fr 1  20 rr rr     	jsr     pushax
000682r 1  A0 02        	ldy     #$02
000684r 1  B1 rr        	lda     (sp),y
000686r 1  20 rr rr     	jsr     _load_sprites
000689r 1  A0 07        	ldy     #$07
00068Br 1  20 rr rr     	jsr     staxysp
00068Er 1  A0 08        	ldy     #$08
000690r 1  20 rr rr     	jsr     ldaxysp
000693r 1  E0 00        	cpx     #$00
000695r 1  D0 02        	bne     L0006
000697r 1  C9 00        	cmp     #$00
000699r 1  20 rr rr     L0006:	jsr     boolne
00069Cr 1  D0 03 4C rr  	jeq     L0005
0006A0r 1  rr           
0006A1r 1  A9 rr        	lda     #<(S0004)
0006A3r 1  A2 rr        	ldx     #>(S0004)
0006A5r 1  20 rr rr     	jsr     pushax
0006A8r 1  A0 06        	ldy     #$06
0006AAr 1  20 rr rr     	jsr     ldaxysp
0006ADr 1  20 rr rr     	jsr     pushax
0006B0r 1  A0 0C        	ldy     #$0C
0006B2r 1  20 rr rr     	jsr     ldaxysp
0006B5r 1  20 rr rr     	jsr     pushax
0006B8r 1  A0 08        	ldy     #$08
0006BAr 1  20 rr rr     	jsr     ldaxysp
0006BDr 1  20 rr rr     	jsr     pushax
0006C0r 1  A0 08        	ldy     #$08
0006C2r 1  20 rr rr     	jsr     _printf
0006C5r 1  A0 02        	ldy     #$02
0006C7r 1  20 rr rr     	jsr     ldaxysp
0006CAr 1  20 rr rr     	jsr     pushax
0006CDr 1  A0 02        	ldy     #$02
0006CFr 1  B1 rr        	lda     (sp),y
0006D1r 1  20 rr rr     	jsr     _load_sprites
0006D4r 1  A0 05        	ldy     #$05
0006D6r 1  20 rr rr     	jsr     staxysp
0006D9r 1  A0 06        	ldy     #$06
0006DBr 1  20 rr rr     	jsr     ldaxysp
0006DEr 1  E0 00        	cpx     #$00
0006E0r 1  D0 02        	bne     L0008
0006E2r 1  C9 00        	cmp     #$00
0006E4r 1  20 rr rr     L0008:	jsr     boolne
0006E7r 1  D0 03 4C rr  	jeq     L0007
0006EBr 1  rr           
0006ECr 1  A9 rr        	lda     #<(S0005)
0006EEr 1  A2 rr        	ldx     #>(S0005)
0006F0r 1  20 rr rr     	jsr     pushax
0006F3r 1  A0 0A        	ldy     #$0A
0006F5r 1  20 rr rr     	jsr     ldaxysp
0006F8r 1  20 rr rr     	jsr     pushax
0006FBr 1  A0 04        	ldy     #$04
0006FDr 1  20 rr rr     	jsr     _printf
000700r 1  A0 08        	ldy     #$08
000702r 1  20 rr rr     	jsr     ldaxysp
000705r 1  20 rr rr     	jsr     _exit
000708r 1  4C rr rr     L0007:	jmp     L0009
00070Br 1  A9 rr        L0005:	lda     #<(S0006)
00070Dr 1  A2 rr        	ldx     #>(S0006)
00070Fr 1  20 rr rr     	jsr     pushax
000712r 1  A0 02        	ldy     #$02
000714r 1  20 rr rr     	jsr     _printf
000717r 1  A2 00        L0009:	ldx     #$00
000719r 1  A9 03        	lda     #$03
00071Br 1  8D 15 D0     	sta     $D015
00071Er 1  A2 00        	ldx     #$00
000720r 1  A9 FF        	lda     #$FF
000722r 1  8D 1C D0     	sta     $D01C
000725r 1  A2 00        	ldx     #$00
000727r 1  A9 02        	lda     #$02
000729r 1  8D 25 D0     	sta     $D025
00072Cr 1  A2 00        	ldx     #$00
00072Er 1  A9 01        	lda     #$01
000730r 1  8D 26 D0     	sta     $D026
000733r 1  A2 00        	ldx     #$00
000735r 1  A9 0B        	lda     #$0B
000737r 1  8D 27 D0     	sta     $D027
00073Ar 1  A2 00        	ldx     #$00
00073Cr 1  A9 0B        	lda     #$0B
00073Er 1  8D 28 D0     	sta     $D028
000741r 1  A9 rr        	lda     #<(S0007)
000743r 1  A2 rr        	ldx     #>(S0007)
000745r 1  20 rr rr     	jsr     pushax
000748r 1  A0 02        	ldy     #$02
00074Ar 1  20 rr rr     	jsr     _printf
00074Dr 1  20 rr rr     	jsr     _init_mobs
000750r 1  20 rr rr     	jsr     _draw_mobs
000753r 1  4C rr rr     	jmp     L000C
000756r 1  4C rr rr     L000A:	jmp     L000D
000759r 1  A2 00        L000D:	ldx     #$00
00075Br 1  AD 12 D0     	lda     $D012
00075Er 1  C9 FB        	cmp     #$FB
000760r 1  20 rr rr     	jsr     boolult
000763r 1  D0 F4        	jne     L000D
000765r 1  20 rr rr     	jsr     _move_mobs
000768r 1  20 rr rr     	jsr     _draw_mobs
00076Br 1  4C rr rr     L000C:	jmp     L000A
00076Er 1  A2 00        	ldx     #$00
000770r 1  A9 00        	lda     #$00
000772r 1  4C rr rr     	jmp     L0001
000775r 1  A0 0D        L0001:	ldy     #$0D
000777r 1  20 rr rr     	jsr     addysp
00077Ar 1  60           	rts
00077Br 1               
00077Br 1               .endproc
00077Br 1               
00077Br 1               
